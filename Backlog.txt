#### In current Sprint #########################################################

--------------------------------------------------------------------------------
Bootstrap a libGDX project in our src github repo
> this could (should?) be finished by the end of the meeting
est 1 hour
:Brett Menzies

--------------------------------------------------------------------------------
write class diagrams makefile
> automatically adding chapters and diagrams from subdirectories would be nice
> Something so someone can update a class diagram and just run "make" to update
    all the png's that need updated
est 2 hr
:Brett Menzies

--------------------------------------------------------------------------------
Get a quick and dirty sprite set made for map and character
> Describe the tile-based view's characteristics
> at least 4 tiles and a basic character
> 32x32 pixels
est 2hr
:Elizabeth Hernandez

--------------------------------------------------------------------------------
Initial map implementation
:Micheal Mueller

--------------------------------------------------------------------------------
Initial sprite resource manager
:Gabriel

--------------------------------------------------------------------------------
Document how abstract commands will be passed from input to game engine
> eventually comms system will embody the "to" in the previous sentence
> movement, leveling, changing equipment, interacting with the map, conversation
    all need to be supported eventually
:Brett Menzies
--------------------------------------------------------------------------------
Write accompanying Minimally-Implemented Stub Classes for class diagrams
> or (probably often) Interfaces instead of  ^MISC^
est 2 hr
:Jordan Lynn

--------------------------------------------------------------------------------
Implement the program's major structures
> register input handler
> Game engine loop thread
    this is what will eventually be in the server, and replaced in the client
    by comms at that time
> central sprite bank managing high-memory usage resources
: Alexia and Gabriel

--------------------------------------------------------------------------------
Initial player class
> should extend drawable and draw itself onscreen at the right location
: Gabriel

--------------------------------------------------------------------------------
write game engine loop to accept commands 
> threadsafe command queue
> cycle through commands and move the player
: Gabriel

--------------------------------------------------------------------------------
Initial implementation of input system
> just keyboard is fine
> the structure should already exist from the class diagram conversion
: Gabriel
                                                                                <Completed above
#### Backlog ###################################################################<Next release marker

--------------------------------------------------------------------------------
Scrolling map view
> should keep active player centered for now

--------------------------------------------------------------------------------
Design and Implement the on-screen HUD
> more images will need to be made
> the data can be bogus until more detailed characters are realized
> bonus points for using 9-patch boxes

--------------------------------------------------------------------------------
Complete Main Menu
> Write to satisfy main menu use cases
> make it actually launch the game
> stretch goal: player sprite selection screen

--------------------------------------------------------------------------------
code for referencing objects between client and server
> The game loop changed to refer to objects by ID instead of local reference

--------------------------------------------------------------------------------
Splice local "comms" system into the game
> will pass all data between the game engine loop and game state/input through
    this

--------------------------------------------------------------------------------
separate the server into another process with its own game state

--------------------------------------------------------------------------------
code for tracking state changes on the server

--------------------------------------------------------------------------------
packing commands/state changes into packets    

--------------------------------------------------------------------------------
unpacking packets into commands/state changes
                                                                                <Must Have above
    
--------------------------------------------------------------------------------
server maintains a list of active clients and accepts new clients

--------------------------------------------------------------------------------
main menu sets up server and automates local connection

--------------------------------------------------------------------------------
Add chat box to on-screen HUD

--------------------------------------------------------------------------------
Implement a more powerful map file reader
> larger variety of accepted tiles
> more detailed specification of walkable regions
> apply rotations to sprites and render multiple sprites together
   like the carpet under chairs
> a way to specify item and NPC locations etc.
                                                                                <Like to Have above

--------------------------------------------------------------------------------
make a few basic items
> stack of paper, red stapler, etc.

--------------------------------------------------------------------------------
track and draw items dropped on the map

--------------------------------------------------------------------------------
Describe and implement a few different types of items to be found
> maybe their stats are procedurally generated?
> maybe their stats come from text files?

--------------------------------------------------------------------------------
More detailed Descriptions of the different factions
> Include their mutual opinions

--------------------------------------------------------------------------------
NPC system
> can just be dummies on the map
> should at least by aligned with a faction in spirit

--------------------------------------------------------------------------------
design and implement basic quest system

--------------------------------------------------------------------------------
Implement player stats and leveling logic that is more complete
> generate character leveling tree

--------------------------------------------------------------------------------
implement conversations
> should get quests from dummy NPC's

--------------------------------------------------------------------------------
describe and test the client/server relationship for updating real time data
> class diagrams (and time diagrams) never got made
> Document the game state to by synced between clients in excruciating detail

--------------------------------------------------------------------------------
NPC AI system
> random walks, returning fire, etc.

--------------------------------------------------------------------------------
give actors health and combat abilities

--------------------------------------------------------------------------------
More interesting and intelligent NPC AI
                                                                                <Wont Have above

